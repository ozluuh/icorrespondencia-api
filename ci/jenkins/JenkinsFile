pipeline {
    agent any
    tools {
        maven 'apache-maven'
    }
    parameters {
        string(name: 'APP_NAME', defaultValue: 'icorrespondencia', description: 'Enter app name to deploy', trim: true)
        password(name: 'DB_PASS', defaultValue: '', description: 'Enter database password')
        string(name: 'DB_USER', defaultValue: 'fiap', description: 'Enter database user', trim: true)
        string(name: 'DB_HOST', defaultValue: 'icorrespondencia-server', description: 'Enter database server name', trim: true)
        string(name: 'DB_NAME', defaultValue: 'icorrespondencia', description: 'Enter database name', trim: true)
        string(name: 'REPO', defaultValue: 'https://github.com/ozluuh/icorrespondencia-api.git', description: 'Enter repository url', trim: true)
    }
    stages {
        stage('Get code') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: "${params.REPO}"]]])
            }
        }
        stage('Clean target workspace') {
            steps {
                sh 'mvn clean'
            }
        }
        stage('Build source') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Deploy app to Azure') {
            steps {
                script {
                    env.AZ_APP_NAME_DEPLOY = "${params.APP_NAME}"
                    env.AZ_POSTGRES_DB_HOST = "${params.DB_HOST}"
                    env.AZ_POSTGRES_DB_NAME = "${params.DB_NAME}"
                    env.AZ_POSTGRES_DB_PASS = "${params.DB_PASS}"
                    env.AZ_POSTGRES_DB_USER = "${params.DB_USER}"
                }
                catchError {
                    sh "mvn azure-webapp:deploy"
                }
            }
            post {
                failure {
                    echo 'App not deployed'
                    error('Failure to deploy app, please check logs')
                }
            }
        }
    }
    post {
        always {
            echo "End: ${JOB_NAME} pipeline ended"
            deleteDir()
            echo 'Workspace cleaned'
        }
        aborted {
            echo "Fail: ${JOB_NAME} pipeline aborted"
        }
        failure {
            echo "Fail: ${JOB_NAME} pipeline failed"
        }
        success {
            echo "Success: ${JOB_NAME} pipeline completed :)"
        }
    }
}
